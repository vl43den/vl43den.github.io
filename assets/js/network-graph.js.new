// Network graph visualization for homepage
(() => {
  // Debug logs to help diagnose the issue
  console.log("Network graph: initializing");
  console.log("Network graph: checking path", window.location.pathname);
  
  // Only run on home page - check for root path or index.html or empty path
  const isHomePage = window.location.pathname === '/' || 
                     window.location.pathname === '/index.html' || 
                     window.location.pathname === '' ||
                     window.location.pathname.endsWith('/');
  
  if (!isHomePage) {
    console.log("Network graph: not on homepage, exiting");
    return; // Only run on homepage
  }
  
  console.log("Network graph: on homepage, continuing");
  
  // Check if page-content exists
  const pageContent = document.querySelector('.page-content');
  if (pageContent) {
    console.log("Network graph: adding home class to content");
    pageContent.classList.add('home');
  }
  
  // Find the network canvas
  const networkCanvas = document.getElementById('network-canvas');
  
  // If no canvas found, exit
  if (!networkCanvas) {
    console.error("Network graph: canvas not found, exiting");
    return;
  }
  
  console.log("Network graph: canvas found", networkCanvas);
  
  const ctx = networkCanvas.getContext('2d');
  
  // Set canvas size
  function resizeCanvas() {
    networkCanvas.width = window.innerWidth;
    networkCanvas.height = window.innerHeight * 0.65; // 65% of viewport height
  }
  
  window.addEventListener('resize', resizeCanvas);
  resizeCanvas();
  
  // Make sure canvas is visible
  networkCanvas.style.display = 'block';
  networkCanvas.style.position = 'absolute';
  networkCanvas.style.top = '0';
  networkCanvas.style.left = '0';
  networkCanvas.style.width = '100%';
  networkCanvas.style.height = '65vh';
  networkCanvas.style.zIndex = '1';
  networkCanvas.style.opacity = '0.8';
  
  // Nodes and connections
  class Node {
    constructor(x, y, label) {
      this.x = x;
      this.y = y;
      this.targetX = x;
      this.targetY = y;
      this.radius = 3 + Math.random() * 2;
      this.label = label;
      this.connections = [];
      this.velocity = {
        x: (Math.random() - 0.5) * 0.3,
        y: (Math.random() - 0.5) * 0.3
      };
      this.color = this.getRandomColor();
      this.pulseSpeed = 0.02 + Math.random() * 0.03;
      this.pulsePhase = Math.random() * Math.PI * 2;
      this.isHovered = false;
      this.originalRadius = this.radius;
    }
    
    getRandomColor() {
      const colors = [
        'rgba(100, 180, 255, 0.8)',  // Light blue
        'rgba(120, 130, 255, 0.8)',  // Purple blue
        'rgba(180, 140, 255, 0.8)',  // Light purple
        'rgba(255, 160, 100, 0.8)',  // Orange
        'rgba(100, 220, 255, 0.8)'   // Cyan
      ];
      return colors[Math.floor(Math.random() * colors.length)];
    }
    
    update() {
      // Pulsing effect
      this.pulsePhase += this.pulseSpeed;
      if (this.pulsePhase > Math.PI * 2) {
        this.pulsePhase = 0;
      }
      
      // Calculate pulse factor
      const pulseFactor = Math.sin(this.pulsePhase) * 0.2 + 1.0;
      
      // Apply pulsing to radius if not hovered
      if (!this.isHovered) {
        this.radius = this.originalRadius * pulseFactor;
      } else {
        this.radius = this.originalRadius * 1.5; // Enlarged when hovered
      }
      
      // Move slightly in random directions
      this.x += this.velocity.x;
      this.y += this.velocity.y;
      
      // Bounce off edges with some padding
      const padding = 50;
      if (this.x < padding || this.x > networkCanvas.width - padding) {
        this.velocity.x *= -1;
        // Push back into bounds
        if (this.x < padding) this.x = padding;
        if (this.x > networkCanvas.width - padding) this.x = networkCanvas.width - padding;
      }
      
      if (this.y < padding || this.y > networkCanvas.height - padding) {
        this.velocity.y *= -1;
        // Push back into bounds
        if (this.y < padding) this.y = padding;
        if (this.y > networkCanvas.height - padding) this.y = networkCanvas.height - padding;
      }
      
      // Randomly change velocity slightly
      if (Math.random() < 0.02) {
        this.velocity.x += (Math.random() - 0.5) * 0.1;
        this.velocity.y += (Math.random() - 0.5) * 0.1;
        
        // Limit velocity
        this.velocity.x = Math.min(Math.max(this.velocity.x, -0.4), 0.4);
        this.velocity.y = Math.min(Math.max(this.velocity.y, -0.4), 0.4);
      }
    }
    
    draw() {
      // Draw node
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
      ctx.fillStyle = this.color;
      ctx.fill();
      
      // Draw glow
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius * 2.5, 0, Math.PI * 2);
      const gradient = ctx.createRadialGradient(
        this.x, this.y, this.radius,
        this.x, this.y, this.radius * 3
      );
      const colorParts = this.color.match(/[\d.]+/g);
      if (colorParts && colorParts.length >= 4) {
        const r = colorParts[0];
        const g = colorParts[1];
        const b = colorParts[2];
        gradient.addColorStop(0, `rgba(${r}, ${g}, ${b}, 0.3)`);
        gradient.addColorStop(1, `rgba(${r}, ${g}, ${b}, 0)`);
      } else {
        gradient.addColorStop(0, 'rgba(100, 180, 255, 0.3)');
        gradient.addColorStop(1, 'rgba(100, 180, 255, 0)');
      }
      ctx.fillStyle = gradient;
      ctx.fill();
      
      // Draw label on hover
      if (this.isHovered) {
        ctx.font = 'bold 14px Inter, sans-serif';
        ctx.fillStyle = 'white';
        ctx.textAlign = 'center';
        ctx.fillText(this.label, this.x, this.y - 20);
        
        // Draw background for label
        const textWidth = ctx.measureText(this.label).width;
        ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';
        ctx.fillRect(this.x - textWidth/2 - 5, this.y - 34, textWidth + 10, 18);
        
        // Draw label text again over background
        ctx.fillStyle = 'white';
        ctx.fillText(this.label, this.x, this.y - 20);
      }
    }
    
    connect(node) {
      if (!this.connections.includes(node) && node !== this) {
        this.connections.push(node);
      }
    }
    
    drawConnections() {
      this.connections.forEach(node => {
        // Calculate distance
        const dx = this.x - node.x;
        const dy = this.y - node.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        const maxDistance = 200;
        
        // Only draw if within max distance
        if (distance < maxDistance) {
          // Calculate opacity based on distance
          const opacity = Math.max(0, 1 - distance / maxDistance);
          
          ctx.beginPath();
          ctx.moveTo(this.x, this.y);
          ctx.lineTo(node.x, node.y);
          
          // Set gradient for connection
          const gradient = ctx.createLinearGradient(this.x, this.y, node.x, node.y);
          
          // Extract colors from both nodes
          const colorParts1 = this.color.match(/[\d.]+/g);
          const colorParts2 = node.color.match(/[\d.]+/g);
          
          if (colorParts1 && colorParts2 && colorParts1.length >= 4 && colorParts2.length >= 4) {
            gradient.addColorStop(0, `rgba(${colorParts1[0]}, ${colorParts1[1]}, ${colorParts1[2]}, ${opacity * 0.5})`);
            gradient.addColorStop(1, `rgba(${colorParts2[0]}, ${colorParts2[1]}, ${colorParts2[2]}, ${opacity * 0.5})`);
          } else {
            gradient.addColorStop(0, `rgba(100, 180, 255, ${opacity * 0.5})`);
            gradient.addColorStop(1, `rgba(180, 140, 255, ${opacity * 0.5})`);
          }
          
          ctx.strokeStyle = gradient;
          ctx.lineWidth = opacity * 1.2;
          ctx.stroke();
          
          // Draw data packet animation if nodes are connected
          if (Math.random() < 0.005) {
            animateDataPacket(this, node);
          }
        }
      });
    }
  }
  
  // Data packets for animation
  const dataPackets = [];
  
  function animateDataPacket(fromNode, toNode) {
    dataPackets.push({
      fromX: fromNode.x,
      fromY: fromNode.y,
      toX: toNode.x,
      toY: toNode.y,
      progress: 0,
      speed: 0.01 + Math.random() * 0.02,
      color: Math.random() > 0.5 ? fromNode.color : toNode.color
    });
  }
  
  function updateDataPackets() {
    for (let i = dataPackets.length - 1; i >= 0; i--) {
      const packet = dataPackets[i];
      packet.progress += packet.speed;
      
      if (packet.progress >= 1) {
        dataPackets.splice(i, 1);
      }
    }
  }
  
  function drawDataPackets() {
    dataPackets.forEach(packet => {
      const x = packet.fromX + (packet.toX - packet.fromX) * packet.progress;
      const y = packet.fromY + (packet.toY - packet.fromY) * packet.progress;
      
      ctx.beginPath();
      ctx.arc(x, y, 2, 0, Math.PI * 2);
      ctx.fillStyle = packet.color;
      ctx.fill();
      
      // Draw trail
      ctx.beginPath();
      ctx.arc(x, y, 3, 0, Math.PI * 2);
      const gradient = ctx.createRadialGradient(x, y, 0, x, y, 6);
      gradient.addColorStop(0, packet.color);
      gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
      ctx.fillStyle = gradient;
      ctx.fill();
    });
  }
  
  // Create nodes
  const nodes = [];
  const techWords = [
    'Security', 'CTF', 'Python', 'Linux', 'Pwn',
    'Forensics', 'Web', 'Crypto', 'C++', 'Shell',
    'OSINT', 'Coding', 'Reverse', 'Analysis', 'SQL',
    'Network', 'Binary', 'Exploit', 'Hash', 'Payload', 
    'Buffer', 'Overflow', 'Boot', 'Stack', 'Heap',
    'Hook', 'API', 'Remote', 'Local', 'Kernel'
  ];
  
  // Initialize nodes
  function createNodes() {
    // Clear any existing nodes
    nodes.length = 0;
    
    const nodeCount = Math.min(30, Math.floor(networkCanvas.width * networkCanvas.height / 25000));
    
    // Initialize nodes with better distribution
    for (let i = 0; i < nodeCount; i++) {
      // Create a grid-like distribution with some randomness
      const cellSize = Math.sqrt((networkCanvas.width * networkCanvas.height) / nodeCount);
      const cols = Math.floor(networkCanvas.width / cellSize);
      const rows = Math.floor(networkCanvas.height / cellSize);
      
      const col = i % cols;
      const row = Math.floor(i / cols) % rows;
      
      // Add randomness to position within the cell
      const x = col * cellSize + Math.random() * cellSize * 0.8 + cellSize * 0.1;
      const y = row * cellSize + Math.random() * cellSize * 0.8 + cellSize * 0.1;
      
      const label = techWords[i % techWords.length];
      nodes.push(new Node(x, y, label));
    }
    
    // Connect nodes
    nodes.forEach(node => {
      // Connect to 2-4 other nodes
      const connectionCount = 2 + Math.floor(Math.random() * 3);
      
      // Find nearest nodes to connect to
      const nodeDistances = nodes
        .filter(n => n !== node)
        .map(n => ({
          node: n,
          distance: Math.sqrt(Math.pow(node.x - n.x, 2) + Math.pow(node.y - n.y, 2))
        }))
        .sort((a, b) => a.distance - b.distance);
      
      // Connect to closest nodes
      for (let i = 0; i < Math.min(connectionCount, nodeDistances.length); i++) {
        node.connect(nodeDistances[i].node);
      }
      
      // Add some random long-distance connections for small world network effect
      if (Math.random() < 0.3 && nodes.length > 10) {
        const randomNodeIndex = Math.floor(Math.random() * nodes.length);
        if (nodes[randomNodeIndex] !== node) {
          node.connect(nodes[randomNodeIndex]);
        }
      }
    });
  }
  
  // Handle window resize - recreate nodes
  window.addEventListener('resize', () => {
    resizeCanvas();
    createNodes();
  });
  
  // Handle mouse interaction
  let mouseX = 0;
  let mouseY = 0;
  
  networkCanvas.addEventListener('mousemove', (e) => {
    const rect = networkCanvas.getBoundingClientRect();
    mouseX = e.clientX - rect.left;
    mouseY = e.clientY - rect.top;
    
    // Check if mouse is hovering over a node
    nodes.forEach(node => {
      const distance = Math.sqrt(
        Math.pow(mouseX - node.x, 2) + Math.pow(mouseY - node.y, 2)
      );
      
      node.isHovered = distance < 20;
    });
  });
  
  // Animation loop
  function animate() {
    ctx.clearRect(0, 0, networkCanvas.width, networkCanvas.height);
    
    // Draw connections first (so they're behind nodes)
    nodes.forEach(node => {
      node.drawConnections();
    });
    
    // Update and draw data packets
    updateDataPackets();
    drawDataPackets();
    
    // Update and draw nodes
    nodes.forEach(node => {
      node.update();
      node.draw();
    });
    
    requestAnimationFrame(animate);
  }
  
  // Initialize on load
  console.log("Network graph: creating nodes");
  createNodes();
  console.log("Network graph: starting animation");
  animate();
})();
